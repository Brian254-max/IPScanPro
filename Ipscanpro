#!/bin/bash
set -e

# Tool made by Lokesh Kumar

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
RESET='\033[0m'

# Detect the OS
if [[ $(uname -o) == "Android" ]]; then
    OS="Termux"
    PKG_MANAGER="pkg"
    UPDATE_CMD="pkg update -y && pkg upgrade -y"
    INSTALL_CMD="pkg install -y"
elif [[ -f /etc/debian_version ]]; then
    OS="Kali Linux"
    PKG_MANAGER="apt-get"
    UPDATE_CMD="apt-get update -y && apt-get upgrade -y"
    INSTALL_CMD="apt-get install -y"
else
    echo -e "${RED}Unsupported operating system.${RESET}"
    exit 1
fi

# Update and upgrade system
echo -e "${GREEN}Updating and upgrading $OS...${RESET}"
eval "$UPDATE_CMD"

# Install required packages
echo -e "${GREEN}Installing required packages...${RESET}"
if ! $INSTALL_CMD git python python2 python3 curl wget openssl figlet; then
    echo -e "${RED}Failed to install required packages.${RESET}"
    exit 1
fi

# Install Python dependencies
echo -e "${GREEN}Installing Python dependencies...${RESET}"
if ! pip install lolcat requests; then
    echo -e "${RED}Failed to install Python dependencies.${RESET}"
    exit 1
fi

clear
sleep 2
echo -e "${GREEN}Setup completed successfully!${RESET}"

# Directory to save scan results
SAVE_DIR="$HOME/IP_Scanner_Results"

# Ensure save directory exists
mkdir -p "$SAVE_DIR"

# Function to fetch IP details using Python
fetch_ip_details() {
    local ip_address=$1
    python3 - <<END
import requests
import os

access_token = "914d41abe9bb39"
ip_address = "$ip_address"
url = f"https://ipinfo.io/{ip_address}/json?token={access_token}"

try:
    response = requests.get(url)
    response.raise_for_status()
    details = response.json()
except requests.RequestException as e:
    print("${RED}Failed to fetch details for ${ip_address}. Error: {e}${RESET}")
    exit(1)

# Save details to file
save_dir = "$SAVE_DIR"
filename = f"{save_dir}/{details.get('ip', 'N/A')}_Report.txt"
with open(filename, 'w') as file:
    for key, value in details.items():
        file.write(f"{key.capitalize()}: {value}\n")

print("${GREEN}Details saved to ${filename}${RESET}")
END
}

# Function to update the tool
update_tool() {
    echo -e "${BLUE}Updating tool...${RESET}"
    for i in {0..100}; do
        sleep 0.1
        echo -ne "${YELLOW}Updating ====> $i%${RESET}\r"
    done
    echo -e "\n${GREEN}Tool is already up-to-date!${RESET}"
    sleep 1
}

# Function to remove the tool
remove_tool() {
    echo -e "${RED}Removing tool...${RESET}"
    rm -rf "$HOME/IPScanPro"
    echo -e "${GREEN}Tool removed successfully!${RESET}"
}

# Function to display the main menu
main_menu() {
    while true; do
        echo -e "${MAGENTA}\nMain Menu:${RESET}"
        echo -e "${CYAN}1. Scan IPv4${RESET}"
        echo -e "${CYAN}2. Scan IPv6${RESET}"
        echo -e "${CYAN}3. Update Tool${RESET}"
        echo -e "${CYAN}4. Remove Tool${RESET}"
        echo -e "${CYAN}5. Exit${RESET}"

        read -p "$(echo -e ${YELLOW}Enter your choice: ${RESET})" choice

        case $choice in
            1)
                read -p "$(echo -e ${YELLOW}Enter the IPv4 address: ${RESET})" ip_address
                if [[ ! $ip_address =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo -e "${RED}Invalid IPv4 address format.${RESET}"
                    continue
                fi
                fetch_ip_details "$ip_address"
                ;;
            2)
                read -p "$(echo -e ${YELLOW}Enter the IPv6 address: ${RESET})" ip_address
                fetch_ip_details "$ip_address"
                ;;
            3)
                update_tool
                ;;
            4)
                remove_tool
                exit 0
                ;;
            5)
                echo -e "${RED}Exiting...${RESET}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice, please try again.${RESET}"
                ;;
        esac
    done
}

# Execute the main function
main_menu
